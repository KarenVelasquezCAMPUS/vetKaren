// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApiVetKarenContext))]
    [Migration("20231006172937_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("lab", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicalTreatments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AdminDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("date");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dose");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("observation");

                    b.Property<int>("QuotesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("QuotesId");

                    b.ToTable("medicaltreatments", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("price");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int")
                        .HasColumnName("quantityavailable");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.ToTable("medicine", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicineSupplier", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("medicinesupplier", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<string>("Exit")
                        .HasColumnType("longtext");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("MovementMedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("MovementMedicineId");

                    b.ToTable("movementdetail", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DateTime")
                        .HasColumnName("date");

                    b.Property<string>("Entrance")
                        .HasColumnType("longtext");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("MovementTypeId");

                    b.ToTable("movementmedicine", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("movementtype", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("owner", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("borndate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("SpiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SpiceId");

                    b.ToTable("pet", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Quotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DateTime")
                        .HasColumnName("date");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("hour");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reason");

                    b.Property<int>("VetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("VetId");

                    b.ToTable("quotes", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("SpiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpiceId");

                    b.ToTable("race", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idrt")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("creationdate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("expirationdate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isactive");

                    b.Property<string>("RefreshTokenK")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("refreshtoken");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refreshtoken", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Spice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("spice", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserRol", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("userrol", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Vet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasColumnName("phone");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("speciality");

                    b.HasKey("Id");

                    b.ToTable("vet", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MedicalTreatments", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MedicalTreatmentss")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Quotes", "Quotes")
                        .WithMany("MedicalTreatmentss")
                        .HasForeignKey("QuotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.HasOne("Core.Entities.Lab", "Lab")
                        .WithMany("Medicines")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("Core.Entities.MedicineSupplier", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MedicineSuppliers")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Supplier", "Supplier")
                        .WithMany("MedicineSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.MovementDetail", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MovementDetails")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MovementMedicine", "MovementMedicine")
                        .WithMany("MovementDetails")
                        .HasForeignKey("MovementMedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MovementMedicine");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.HasOne("Core.Entities.Medicine", "Medicine")
                        .WithMany("MovementMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MovementType", "MovementType")
                        .WithMany("MedicineMovements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MovementType");
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.HasOne("Core.Entities.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Race", "Race")
                        .WithMany("Pets")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Spice", "Spice")
                        .WithMany("Pets")
                        .HasForeignKey("SpiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Race");

                    b.Navigation("Spice");
                });

            modelBuilder.Entity("Core.Entities.Quotes", b =>
                {
                    b.HasOne("Core.Entities.Pet", "Pet")
                        .WithMany("Quotess")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Vet", "Vet")
                        .WithMany("Quotess")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Vet");
                });

            modelBuilder.Entity("Core.Entities.Race", b =>
                {
                    b.HasOne("Core.Entities.Spice", "Spice")
                        .WithMany("Races")
                        .HasForeignKey("SpiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spice");
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Spice", b =>
                {
                    b.HasOne("Core.Entities.Race", null)
                        .WithMany("Spices")
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("Core.Entities.UserRol", b =>
                {
                    b.HasOne("Core.Entities.Rol", "Rol")
                        .WithMany("UserRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Lab", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Core.Entities.Medicine", b =>
                {
                    b.Navigation("MedicalTreatmentss");

                    b.Navigation("MedicineSuppliers");

                    b.Navigation("MovementDetails");

                    b.Navigation("MovementMedicines");
                });

            modelBuilder.Entity("Core.Entities.MovementMedicine", b =>
                {
                    b.Navigation("MovementDetails");
                });

            modelBuilder.Entity("Core.Entities.MovementType", b =>
                {
                    b.Navigation("MedicineMovements");
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.Entities.Pet", b =>
                {
                    b.Navigation("Quotess");
                });

            modelBuilder.Entity("Core.Entities.Quotes", b =>
                {
                    b.Navigation("MedicalTreatmentss");
                });

            modelBuilder.Entity("Core.Entities.Race", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("Spices");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Spice", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("Core.Entities.Supplier", b =>
                {
                    b.Navigation("MedicineSuppliers");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Vet", b =>
                {
                    b.Navigation("Quotess");
                });
#pragma warning restore 612, 618
        }
    }
}
